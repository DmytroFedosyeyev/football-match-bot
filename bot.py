import logging
from datetime import date, timedelta, datetime
import requests
from bs4 import BeautifulSoup
import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv
import os
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
import time

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(), logging.FileHandler('bot_debug.log')]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TELEGRAM_TOKEN = os.environ.get('TELEGRAM_TOKEN')
API_KEY = os.environ.get('API_KEY')

if not TELEGRAM_TOKEN or not API_KEY:
    logger.critical("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç TELEGRAM_TOKEN –∏–ª–∏ API_KEY –≤ .env")
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–¥–∞—Ç—å TELEGRAM_TOKEN –∏ API_KEY –≤ .env")

# –°–ø–∏—Å–æ–∫ –ª–∏–≥ —Å –∫–æ–¥–∞–º–∏
LEAGUES = {
    'üè¥ –ê–Ω–≥–ª–∏—è (Premier League)': 'PL',
    'üá™üá∏ –ò—Å–ø–∞–Ω–∏—è (La Liga)': 'PD',
    'üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è (Bundesliga)': 'BL1',
    'üá´üá∑ –§—Ä–∞–Ω—Ü–∏—è (Ligue 1)': 'FL1',
    'üáÆüáπ –ò—Ç–∞–ª–∏—è (Serie A)': 'SA',
    'üá≥üá± –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã (Eredivisie)': 'DED',
    'üáµüáπ –ü–æ—Ä—Ç—É–≥–∞–ª–∏—è (Primeira Liga)': 'PPL',
    'üá∫üá¶ –£–∫—Ä–∞–∏–Ω–∞ (Premier League)': 'UPL',
    'üáßüá™ –ë–µ–ª—å–≥–∏—è (Pro League)': 'BPD',
    'üè¥ –®–æ—Ç–ª–∞–Ω–¥–∏—è (Premiership)': 'SPL'
}

bot = telebot.TeleBot(TELEGRAM_TOKEN)
user_state = {}


def create_leagues_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False, row_width=2)
    buttons = [KeyboardButton(league) for league in LEAGUES.keys()]
    keyboard.add(*buttons)
    return keyboard


def create_date_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    today = date.today().strftime('%Y-%m-%d')
    tomorrow = (date.today() + timedelta(days=1)).strftime('%Y-%m-%d')
    keyboard.add(
        InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data=f"date_{today}"),
        InlineKeyboardButton("–ó–∞–≤—Ç—Ä–∞", callback_data=f"date_{tomorrow}")
    )
    return keyboard


def fetch_fixtures(league_code: str, match_date: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ç—á–µ–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –ª–∏–≥–∏ –∏ –¥–∞—Ç—ã."""
    if league_code == "UPL":
        return fetch_upl_fixtures(match_date)
    else:
        return fetch_api_fixtures(league_code, match_date)


def fetch_api_fixtures(league_code: str, match_date: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ç—á–µ–π —á–µ—Ä–µ–∑ Football-Data.org API"""
    logger.info(f"API-–∑–∞–ø—Ä–æ—Å: –ª–∏–≥–∞={league_code}, –¥–∞—Ç–∞={match_date}")
    url = f'https://api.football-data.org/v4/competitions/{league_code}/matches?dateFrom={match_date}&dateTo={match_date}'
    headers = {'X-Auth-Token': API_KEY}

    try:
        response = requests.get(url, headers=headers, timeout=10)
        response.raise_for_status()
        data = response.json()
        matches = data.get('matches', [])

        if not matches:
            return f"‚öΩ –ù–∞ {match_date} –Ω–µ—Ç –º–∞—Ç—á–µ–π –≤ —ç—Ç–æ–π –ª–∏–≥–µ."

        result = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ç—á–µ–π –Ω–∞ {match_date}:\n\n"
        for match in matches:
            home = match['homeTeam']['name']
            away = match['awayTeam']['name']
            time_utc = match['utcDate'][11:16]
            status = match['status']
            result += f"üèüÔ∏è {home} vs {away}\nüïí –í—Ä–µ–º—è (UTC): {time_utc}\nüìä –°—Ç–∞—Ç—É—Å: {status}\n\n"

        return result
    except requests.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ API: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."


def fetch_upl_fixtures(match_date: str) -> str:
    """–ü–∞—Ä—Å–∏—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ç—á–µ–π –£–ü–õ —Å flashscore.com.ua —á–µ—Ä–µ–∑ Selenium"""
    logger.info(f"–ü–∞—Ä—Å–∏–º –£–ü–õ –Ω–∞ {match_date} —Å flashscore.com.ua —á–µ—Ä–µ–∑ Selenium")
    url = "https://www.flashscore.com.ua/football/ukraine/premier-league/fixtures/"

    try:
        chrome_options = Options()
        chrome_options.add_argument("--headless")
        driver = webdriver.Chrome(options=chrome_options)
        driver.get(url)
        logger.info(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, URL: {url}")

        soup = BeautifulSoup(driver.page_source, "html.parser")
        driver.quit()

        result = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –£–ü–õ –Ω–∞ {match_date}:\n\n"
        matches = soup.find_all("div", class_="event__match")
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –º–∞—Ç—á–µ–π: {len(matches)}")

        found = False
        for match in matches:
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
            time_div = match.find("div", class_="event__time")
            if time_div:
                date_time_str = time_div.text.strip()
                logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Ç—á, date_time_str={date_time_str}")

                # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
                parts = date_time_str.split(' ')
                if len(parts) != 2:
                    logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {date_time_str}")
                    continue

                date_str, time_str = parts
                date_str = date_str.replace('.', '')

                try:
                    site_date = f"2025-{date_str[2:4]}-{date_str[0:2]}"
                    logger.info(f"–ò–∑–≤–ª–µ—á—ë–Ω–Ω–∞—è –¥–∞—Ç–∞: {site_date}, –∏—Å–∫–æ–º–∞—è: {match_date}")
                except IndexError:
                    logger.warning(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã: {date_str}")
                    continue

                if site_date != match_date:
                    continue

                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥
                home = match.find("div", class_="event__participant--home").text.strip() if match.find("div",
                                                                                                       class_="event__participant--home") else "N/A"
                away = match.find("div", class_="event__participant--away").text.strip() if match.find("div",
                                                                                                       class_="event__participant--away") else "N/A"
                logger.info(f"–î–æ–º–∞—à–Ω—è—è –∫–æ–º–∞–Ω–¥–∞: {home}, –ì–æ—Å—Ç–µ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞: {away}")

                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
                status = match.find("div", class_="event__stage").text.strip() if match.find("div",
                                                                                             class_="event__stage") else "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω"
                logger.info(f"–°—Ç–∞—Ç—É—Å: {status}")

                result += f"üèüÔ∏è {home} vs {away}\nüïí –í—Ä–µ–º—è: {time_str}\nüìä –°—Ç–∞—Ç—É—Å: {status}\n\n"
                found = True
            else:
                logger.warning("–ü—Ä–æ–ø—É—â–µ–Ω –º–∞—Ç—á: –Ω–µ—Ç event__time")

        if not found:
            logger.info(f"–ú–∞—Ç—á–∏ –£–ü–õ –Ω–∞ {match_date} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return f"‚öΩ –ù–∞ {match_date} –Ω–µ—Ç –º–∞—Ç—á–µ–π –£–ü–õ."

        return result
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ fetch_upl_fixtures: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –£–ü–õ."


@bot.message_handler(commands=['start', 'help'])
def handle_start_help(message):
    user_state[message.chat.id] = {}
    welcome_text = (
        "‚öΩ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Football Schedule Bot!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏–≥—É, –∑–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n/start - –ù–∞—á–∞—Ç—å\n/help - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å"
    )
    bot.send_message(message.chat.id, welcome_text, reply_markup=create_leagues_keyboard())


@bot.message_handler(func=lambda message: message.text in LEAGUES)
def handle_league_selection(message):
    user_state[message.chat.id] = {'league': message.text}
    bot.send_message(
        message.chat.id,
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {message.text}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
        reply_markup=create_date_keyboard()
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith('date_'))
def handle_date_selection(call):
    chat_id = call.message.chat.id
    if chat_id not in user_state or 'league' not in user_state[chat_id]:
        bot.answer_callback_query(call.id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ª–∏–≥—É!")
        return

    league_name = user_state[chat_id]['league']
    league_code = LEAGUES[league_name]
    match_date = call.data.split('_')[1]

    fixtures_info = fetch_fixtures(league_code, match_date)
    bot.send_message(chat_id, fixtures_info)
    bot.answer_callback_query(call.id)
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –ª–∏–≥—É –∏–ª–∏ –¥–∞—Ç—É:", reply_markup=create_leagues_keyboard())


@bot.message_handler(func=lambda message: True)
def handle_unknown(message):
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ª–∏–≥—É –∏–∑ –º–µ–Ω—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")


if __name__ == '__main__':
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    try:
        bot.infinity_polling()
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")